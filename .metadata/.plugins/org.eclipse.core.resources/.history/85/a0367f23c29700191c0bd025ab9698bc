package com.example.springclouddynamicdatasources;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;

public class ClientDatasourceRouter extends AbstractRoutingDataSource {
	private static final Logger LOGGER = LoggerFactory.getLogger(ClientDatasourceRouter.class);

	@Override
	protected Object determineCurrentLookupKey() {		
		return ClientDatabaseContextHolder.getClientDatabase();
	}
	
	public static DataSource createDataSource(ClientDatabase clientDatabase) {
		@SuppressWarnings("unchecked")
		DataSourceBuilder<DataSource> builder = (DataSourceBuilder<DataSource>) DataSourceBuilder.create();
		return builder.url("jdbc:h2:~/" + clientDatabase).driverClassName("org.h2.Driver").username("sa").build();
	}

	private static DataSource createDataSource(DataSourcePojo dataSourcePojo) {
		@SuppressWarnings("unchecked")
		DataSourceBuilder<DataSource> builder = (DataSourceBuilder<DataSource>) DataSourceBuilder.create();
		return builder.url(dataSourcePojo.getUrl()).driverClassName(dataSourcePojo.getDriverClassName())
				.username(dataSourcePojo.getUsername()).build();
	}

	public static DataSource setMultiDataSources(@NotNull List<DataSourcePojo> dataSourcePojos) {
		LOGGER.debug(dataSourcePojos.toString());
		Map<Object, Object> targetDataSources = buildDataSourceMap(dataSourcePojos);
		ClientDatasourceRouter clientDatasourceRouter = new ClientDatasourceRouter();
		clientDatasourceRouter.setTargetDataSources(targetDataSources);
		clientDatasourceRouter.setDefaultTargetDataSource(targetDataSources.get(ClientDatabase.ofId(1)));
		return clientDatasourceRouter;
	}
	
	public static Map<Object, Object> buildDataSourceMap(@NotNull List<DataSourcePojo> dataSourcePojos) {
		Map<Object, Object> targetDataSources = new HashMap<>();
		dataSourcePojos.forEach(d -> {
			DataSource dataSource = createDataSource(d);
			targetDataSources.put(ClientDatabase.ofId(d.getId()), dataSource);
		});
		return targetDataSources;
	}

}
