package com.example.springclouddynamicdatasources;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.cloud.context.config.annotation.RefreshScope;



@RefreshScope
public class MultiDataSources {
	
	private static final Logger LOGGER= LoggerFactory.getLogger(MultiDataSources.class);
	
	@Value("${ds.url}")
	private static List<DataSourcePojo> dataSourceList;

	public static DataSource createDataSource(ClientDatabase clientDatabase) {
		@SuppressWarnings("unchecked")
		DataSourceBuilder<DataSource> builder = (DataSourceBuilder<DataSource>) DataSourceBuilder.create();
		LOGGER.info("jdbc:h2:~/" + clientDatabase);
		LOGGER.debug(dataSourceList.toString());
		return builder.url("jdbc:h2:~/" + clientDatabase).driverClassName("org.h2.Driver").username("sa").build();
	}

	public static DataSource setMultiDataSources() {
		Map<Object, Object> targetDataSources = new HashMap<>();
		DataSource clientADataSource = createDataSource(ClientDatabase.CLIENT_A);
		DataSource clientBDataSource = createDataSource(ClientDatabase.CLIENT_B);
		targetDataSources.put(ClientDatabase.CLIENT_A, clientADataSource);
		targetDataSources.put(ClientDatabase.CLIENT_B, clientBDataSource);

		ClientDatasourceRouter clientDatasourceRouter = new ClientDatasourceRouter();
		clientDatasourceRouter.setTargetDataSources(targetDataSources);
		clientDatasourceRouter.setDefaultTargetDataSource(clientADataSource);

		return clientDatasourceRouter;
	}
}
