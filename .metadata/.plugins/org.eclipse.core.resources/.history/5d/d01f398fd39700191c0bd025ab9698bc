package com.example.springclouddynamicdatasources;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.sql.DataSource;
import javax.validation.constraints.NotNull;

import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.builder.PropertiesBuilderParametersImpl;
import org.apache.commons.configuration2.builder.PropertiesBuilderProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.endpoint.event.RefreshEvent;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.event.EventListener;
import org.springframework.core.annotation.Order;
import org.springframework.core.io.support.PropertiesLoaderUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.nacos.api.annotation.NacosInjected;
import com.alibaba.nacos.api.annotation.NacosProperties;
import com.alibaba.nacos.api.config.ConfigService;
import com.alibaba.nacos.api.config.annotation.NacosConfigListener;
import com.alibaba.nacos.api.config.annotation.NacosConfigurationProperties;
import com.alibaba.nacos.api.naming.NamingService;
import com.alibaba.nacos.spring.context.annotation.EnableNacos;


@Configuration
@RefreshScope
@Order(1)
@ConfigurationProperties(prefix = "ds")
@EnableNacos(globalProperties = @NacosProperties(serverAddr = "192.168.66.100:8848", namespace = "ad23a4bc-49f7-4767-9499-9d32359662c7" + 
		""))
public class DataSourceProperties {

	private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceProperties.class);
	
	@Autowired
	private DefaultListableBeanFactory defaultListableBeanFactory;

	@NotNull
	private List<String> config = new ArrayList<>();

	public List<String> getConfig() {
		return config;
	}

	public void setConfig(List<String> config) {
		this.config = config;
	}

	private List<DataSourcePojo> getDataSourceProperties(List<String> dsConfig) {		
		final List<DataSourcePojo> list = new ArrayList<>();
		dsConfig.forEach(c -> {
			list.add(JSON.parseObject(c, DataSourcePojo.class));
		});
		return list;
	}

//	@EventListener(classes = {RefreshEvent.class})	
	public void updateDataSources(RefreshEvent event) {
		ClientDatasourceRouter dataSource = defaultListableBeanFactory.getBean(ClientDatasourceRouter.class);
		dataSource.toString();
		if ( null != dataSource ) {
			dataSource.setMultiDataSources(getDataSourceProperties(this.config));
		}
		dataSource.toString();
		LOGGER.info("changed properties:{}", event);
	}
	
	@NacosConfigListener(dataId = "ds.properties")
	public void updateDataSources(@NotNull Properties properties) {
		final List<String> propsList = new ArrayList<>();
		properties.forEach((k,v)->{
			LOGGER.info("key:{}, value:{}",k,v);
			if (String.valueOf(k).matches("ds.config\\[\\d+\\]")) {
				propsList.add(String.valueOf(v));
			}
		});
			
		LOGGER.info("properties{}", properties);
	}

}
